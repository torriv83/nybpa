
<?php

it('properly cuts dump string')
    ->expect(fn () => \LaraDumps\LaraDumpsCore\Actions\Support::cut(htmlDumper(), '<pre ', '</pre>'))
    ->toBe(htmlDump());

// Helpers

function htmlDumper(): string
{
    $html = <<< END
    
END;

    return base64_decode($html);
}
function htmlDump(): string
{
    $html = <<< END
    PHByZSBjbGFzcz1zZi1kdW1wIGlkPXNmLWR1bXAtMTAzNDkyODg3MiBkYXRhLWluZGVudC1wYWQ9IiAgIj4iPHNwYW4gY2xhc3M9c2YtZHVtcC1zdHIgdGl0bGU9IjQwIGNoYXJhY3RlcnMiPkl0IHdvcmtzISBUaGFuayB5b3UgZm9yIHVzaW5nIExhcmFEdW1wcyE8L3NwYW4+Ig0KPC9wcmU+
    END;

    return base64_decode($html);
}
